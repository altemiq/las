name: release

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: The version to release
        required: true

jobs:
  promote-nuget:
    runs-on: ubuntu-latest

    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_MULTILEVEL_LOOKUP: false

    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 9.0.x
        source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: dotnet tool install
      run: |
        dotnet tool install ${{ github.repository_owner }}.nuget.release --global

    - name: promote nuget
      run: |
        dotnet nuget-promote source Altemiq.IO.Las --version ${{ inputs.version }}
        dotnet nuget-promote source Altemiq.IO.Las.Compression --version ${{ inputs.version }}
        dotnet nuget-promote source Altemiq.IO.Las.Tiling --version ${{ inputs.version }}
        dotnet nuget-promote source Altemiq.IO.Las.Cloud --version ${{ inputs.version }}
        dotnet nuget-promote source Altemiq.IO.Las.Http --version ${{ inputs.version }}
        dotnet nuget-promote source Altemiq.IO.Las.S3 --version ${{ inputs.version }}
        dotnet nuget-promote source Altemiq.IO.Las.Indexing --version ${{ inputs.version }}

  promote-docker:
    runs-on: ubuntu-latest

    steps:
    - name: promote docker container
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
        repository_name=ghcr.io/${{ github.repository_owner }}/io/las
        pre_release_version=${{ inputs.version }}
        pre_release_image_name=$repository_name:$pre_release_version
        docker pull $pre_release_image_name

        # strip off the pre-release
        release_version=${pre_release_version%%'-'*}
        docker image tag $pre_release_image_name $repository_name:$release_version

        # strip off the patch version
        release_version=${release_version%'.'*}
        docker image tag $pre_release_image_name $repository_name:$release_version

        # strip off the minor version
        release_version=${release_version%'.'*}
        docker image tag $pre_release_image_name $repository_name:$release_version

        # use the 'latest' tag
        docker image tag $pre_release_image_name $repository_name:latest

        docker image push --all-tags $repository_name

  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
      with:
        ref: v${{ inputs.version }}

    - id: get-version
      run: |
        pre_release_version=${{ inputs.version }}
        release_version=${pre_release_version%%'-'*}
        echo $release_version
        echo "release_version=$release_version" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: altemiq/update-existing-release@v1
      with:
        release: v${{ steps.get-version.outputs.release_version }}
        tag: v${{ steps.get-version.outputs.release_version }}
        prerelease: false



