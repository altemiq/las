// -----------------------------------------------------------------------
// <copyright file="Generation.cs" company="Altemiq">
// Copyright (c) Altemiq. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace Altemiq.IO.Las.CodeGeneration;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

/// <summary>
/// Generic generation.
/// </summary>
internal static class Generation
{
    private static readonly char[] SpaceSeparator = [' '];

    /// <summary>
    /// Creates the class.
    /// </summary>
    /// <param name="namespace">The namespace.</param>
    /// <param name="name">The name of the class.</param>
    /// <param name="description">The description of the class.</param>
    /// <param name="members">The class members.</param>
    /// <returns>The created class.</returns>
    public static CompilationUnitSyntax CreateClass(BaseNamespaceDeclarationSyntax @namespace, string name, string description, IEnumerable<MemberDeclarationSyntax> members) =>
        CompilationUnit()
        .WithMembers(
            SingletonList<MemberDeclarationSyntax>(
                @namespace
                .WithNamespaceKeyword(
                    Token(
                        TriviaList(Comment("// <autogenerated />")),
                        SyntaxKind.NamespaceKeyword,
                        TriviaList()))
                .WithMembers(
                    SingletonList<MemberDeclarationSyntax>(
                        ClassDeclaration(name)
                        .WithModifiers(
                            TokenList(
                                Token(
                                    TriviaList(
                                        Trivia(
                                            DocumentationCommentTrivia(
                                                SyntaxKind.SingleLineDocumentationCommentTrivia,
                                                List(
                                                    new XmlNodeSyntax[]
                                                    {
                                                        XmlText()
                                                        .WithTextTokens(
                                                            TokenList(
                                                                XmlTextLiteral(
                                                                    TriviaList(
                                                                        DocumentationCommentExterior("///")),
                                                                    " ",
                                                                    " ",
                                                                    TriviaList()))),
                                                        XmlExampleElement(
                                                            SingletonList<XmlNodeSyntax>(
                                                                XmlText()
                                                                .WithTextTokens(
                                                                    TokenList(
                                                                        XmlTextNewLine(Constants.NewLine, continueXmlDocumentationComment: false),
                                                                        XmlTextLiteral(
                                                                            TriviaList(
                                                                                DocumentationCommentExterior("///")),
                                                                            $" {description}",
                                                                            $" {description}",
                                                                            TriviaList()),
                                                                        XmlTextNewLine(Constants.NewLine, continueXmlDocumentationComment: false),
                                                                        XmlTextLiteral(
                                                                            TriviaList(
                                                                                DocumentationCommentExterior("///")),
                                                                            " ",
                                                                            " ",
                                                                            TriviaList())))))
                                                        .WithStartTag(XmlElementStartTag(XmlName(Identifier("summary"))))
                                                        .WithEndTag(XmlElementEndTag(XmlName(Identifier("summary")))),
                                                        XmlText()
                                                        .WithTextTokens(TokenList(XmlTextNewLine(Constants.NewLine, continueXmlDocumentationComment: false))),
                                                    })))),
                                    SyntaxKind.PublicKeyword,
                                    TriviaList()),
                                Token(SyntaxKind.StaticKeyword)))
                        .WithMembers(List(members))))));

    /// <summary>
    /// Creates the <see cref="Enum"/>.
    /// </summary>
    /// <param name="namespace">The namespace.</param>
    /// <param name="name">The enum name.</param>
    /// <param name="description">The enum description.</param>
    /// <param name="ids">The enum IDs.</param>
    /// <param name="excludeFromCodeCoverage">Set to <see langword="true"/> to exclude methods from code coverage.</param>
    /// <returns>The created enum.</returns>
    public static CompilationUnitSyntax CreateEnum(BaseNamespaceDeclarationSyntax @namespace, string name, string description, IReadOnlyCollection<string?> ids, bool excludeFromCodeCoverage)
    {
        const string EnumParameter = "value";

        return CompilationUnit()
            .WithMembers(
            SingletonList<MemberDeclarationSyntax>(
                @namespace
                .WithNamespaceKeyword(
                    Token(
                        TriviaList(Comment("// <autogenerated />")),
                        SyntaxKind.NamespaceKeyword,
                        TriviaList()))
                .WithMembers(
                    List(
                        new MemberDeclarationSyntax[]
                        {
                            EnumDeclaration(name)
                            .WithModifiers(
                                TokenList(
                                    Token(
                                        TriviaList(
                                            Trivia(
                                                DocumentationCommentTrivia(
                                                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                                                    List(
                                                        new XmlNodeSyntax[]
                                                        {
                                                            XmlText()
                                                            .WithTextTokens(
                                                                TokenList(
                                                                    XmlTextLiteral(
                                                                        TriviaList(
                                                                            DocumentationCommentExterior("///")),
                                                                        " ",
                                                                        " ",
                                                                        TriviaList()))),
                                                            XmlExampleElement(
                                                                SingletonList<XmlNodeSyntax>(
                                                                    XmlText()
                                                                    .WithTextTokens(
                                                                        TokenList(
                                                                            XmlTextNewLine(Constants.NewLine, continueXmlDocumentationComment: false),
                                                                            XmlTextLiteral(
                                                                                TriviaList(
                                                                                    DocumentationCommentExterior("///")),
                                                                                $" {description}",
                                                                                $" {description}",
                                                                                TriviaList()),
                                                                            XmlTextNewLine(Constants.NewLine, continueXmlDocumentationComment: false),
                                                                            XmlTextLiteral(
                                                                                TriviaList(
                                                                                    DocumentationCommentExterior("///")),
                                                                                " ",
                                                                                " ",
                                                                                TriviaList())))))
                                                            .WithStartTag(XmlElementStartTag(XmlName(Identifier("summary"))))
                                                            .WithEndTag(XmlElementEndTag(XmlName(Identifier("summary")))),
                                                            XmlText()
                                                            .WithTextTokens(
                                                                TokenList(
                                                                    XmlTextNewLine(Constants.NewLine, continueXmlDocumentationComment: false))),
                                                        })))),
                                        SyntaxKind.PublicKeyword,
                                        TriviaList())))
                            .WithMembers(SeparatedList<EnumMemberDeclarationSyntax>(GetEnumMemberDeclarations(ids))),
                            ClassDeclaration("ExtensionMethods")
                            .WithModifiers(
                                TokenList(
                                Token(
                                    TriviaList(
                                        Trivia(
                                            DocumentationCommentTrivia(
                                                SyntaxKind.SingleLineDocumentationCommentTrivia,
                                                List(
                                                    new XmlNodeSyntax[]
                                                    {
                                                        XmlText()
                                                        .WithTextTokens(
                                                            TokenList(
                                                                XmlTextLiteral(
                                                                    TriviaList(
                                                                        DocumentationCommentExterior("///")),
                                                                    " ",
                                                                    " ",
                                                                    TriviaList()))),
                                                        XmlExampleElement(
                                                            XmlText()
                                                            .WithTextTokens(
                                                                TokenList(
                                                                    XmlTextNewLine(
                                                                        TriviaList(),
                                                                        Constants.NewLine,
                                                                        Constants.NewLine,
                                                                        TriviaList()),
                                                                    XmlTextLiteral(
                                                                        TriviaList(
                                                                            DocumentationCommentExterior("///")),
                                                                        " ",
                                                                        " ",
                                                                        TriviaList()))),
                                                            XmlNullKeywordElement()
                                                            .WithAttributes(
                                                                SingletonList<XmlAttributeSyntax>(
                                                                    XmlCrefAttribute(
                                                                        NameMemberCref(
                                                                            IdentifierName(name))))),
                                                            XmlText()
                                                            .WithTextTokens(
                                                                TokenList(
                                                                    XmlTextLiteral(
                                                                        TriviaList(),
                                                                        " extensions.",
                                                                        " extensions.",
                                                                        TriviaList()),
                                                                    XmlTextNewLine(
                                                                        TriviaList(),
                                                                        Constants.NewLine,
                                                                        Constants.NewLine,
                                                                        TriviaList()),
                                                                    XmlTextLiteral(
                                                                        TriviaList(
                                                                            DocumentationCommentExterior("///")),
                                                                        " ",
                                                                        " ",
                                                                        TriviaList()))))
                                                        .WithStartTag(
                                                            XmlElementStartTag(
                                                                XmlName(
                                                                    Identifier("content"))))
                                                        .WithEndTag(
                                                            XmlElementEndTag(
                                                                XmlName(
                                                                    Identifier("content")))),
                                                        XmlText()
                                                        .WithTextTokens(
                                                            TokenList(
                                                                XmlTextNewLine(
                                                                    TriviaList(),
                                                                    Constants.NewLine,
                                                                    Constants.NewLine,
                                                                    TriviaList()))),
                                                    })))),
                                    SyntaxKind.PublicKeyword,
                                    TriviaList()),
                                Token(SyntaxKind.StaticKeyword),
                                Token(SyntaxKind.PartialKeyword)))
                            .WithMembers(
                                SingletonList<MemberDeclarationSyntax>(
                                    GetGetDescriptionMethod(name, ids, excludeFromCodeCoverage))),
                        }))));

        static MethodDeclarationSyntax GetGetDescriptionMethod(string name, IEnumerable<string?> ids, bool excludeFromCodeCoverage)
        {
            var methodDeclaration = MethodDeclaration(
                PredefinedType(
                    Token(SyntaxKind.StringKeyword)),
                Identifier("GetDescription"));

            methodDeclaration = excludeFromCodeCoverage
                ? methodDeclaration
                    .WithAttributeLists(
                    SingletonList(
                        AttributeList(
                            SingletonSeparatedList(
                                Attribute(
                                    QualifiedName(
                                        QualifiedName(
                                            QualifiedName(
                                                IdentifierName(nameof(System)),
                                                IdentifierName(nameof(System.Diagnostics))),
                                            IdentifierName(nameof(System.Diagnostics.CodeAnalysis))),
                                        IdentifierName("ExcludeFromCodeCoverage")))))
                        .WithOpenBracketToken(
                            Token(
                                TriviaList(
                                    Trivia(
                                        GetXmlDocs())),
                                SyntaxKind.OpenBracketToken,
                                TriviaList()))))
                .WithModifiers(
                    TokenList(
                        Token(SyntaxKind.PublicKeyword),
                        Token(SyntaxKind.StaticKeyword)))
                : methodDeclaration
                    .WithModifiers(
                    TokenList(
                        Token(
                            TriviaList(
                                Trivia(
                                    GetXmlDocs())),
                            SyntaxKind.PublicKeyword,
                            TriviaList()),
                        Token(SyntaxKind.StaticKeyword)));

            return methodDeclaration
                .WithParameterList(
                ParameterList(
                    SingletonSeparatedList(
                        Parameter(
                            Identifier(EnumParameter))
                        .WithModifiers(
                            TokenList(
                                Token(SyntaxKind.ThisKeyword)))
                        .WithType(
                            IdentifierName(name)))))
                .WithExpressionBody(
                ArrowExpressionClause(
                    SwitchExpression(
                        IdentifierName(EnumParameter))
                    .WithArms(
                        SeparatedList<SwitchExpressionArmSyntax>(GetSwitchExpressionArms(name, ids)))))
                .WithSemicolonToken(
                Token(SyntaxKind.SemicolonToken));

            static DocumentationCommentTriviaSyntax GetXmlDocs()
            {
                return DocumentationCommentTrivia(
                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                    List(
                        new XmlNodeSyntax[]
                        {
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("///")),
                                        " ",
                                        " ",
                                        TriviaList()))),
                            XmlExampleElement(
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextNewLine(
                                            TriviaList(),
                                            Constants.NewLine,
                                            Constants.NewLine,
                                            TriviaList()),
                                        XmlTextLiteral(
                                            TriviaList(
                                                DocumentationCommentExterior("    ///")),
                                            " Gets the description for the specified ",
                                            " Gets the description for the specified ",
                                            TriviaList()))),
                                XmlNullKeywordElement()
                                .WithAttributes(
                                    SingletonList<XmlAttributeSyntax>(
                                        XmlCrefAttribute(
                                            NameMemberCref(
                                                IdentifierName("Brand"))))),
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(),
                                            ".",
                                            ".",
                                            TriviaList()),
                                        XmlTextNewLine(
                                            TriviaList(),
                                            Constants.NewLine,
                                            Constants.NewLine,
                                            TriviaList()),
                                        XmlTextLiteral(
                                            TriviaList(
                                                DocumentationCommentExterior("    ///")),
                                            " ",
                                            " ",
                                            TriviaList()))))
                            .WithStartTag(
                                XmlElementStartTag(
                                    XmlName(
                                        Identifier("summary"))))
                            .WithEndTag(
                                XmlElementEndTag(
                                    XmlName(
                                        Identifier("summary")))),
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextNewLine(
                                        TriviaList(),
                                        Constants.NewLine,
                                        Constants.NewLine,
                                        TriviaList()),
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("    ///")),
                                        " ",
                                        " ",
                                        TriviaList()))),
                            XmlExampleElement(
                                SingletonList<XmlNodeSyntax>(
                                    XmlText()
                                    .WithTextTokens(
                                        TokenList(
                                            XmlTextLiteral(
                                                TriviaList(),
                                                "The value to get the description for.",
                                                "The value to get the description for.",
                                                TriviaList())))))
                            .WithStartTag(
                                XmlElementStartTag(
                                    XmlName(
                                        Identifier(
                                            TriviaList(),
                                            SyntaxKind.ParamKeyword,
                                            "param",
                                            "param",
                                            TriviaList())))
                                .WithAttributes(
                                    SingletonList<XmlAttributeSyntax>(
                                        XmlNameAttribute(
                                            XmlName(
                                                Identifier("name")),
                                            Token(SyntaxKind.DoubleQuoteToken),
                                            IdentifierName(EnumParameter),
                                            Token(SyntaxKind.DoubleQuoteToken)))))
                            .WithEndTag(
                                XmlElementEndTag(
                                    XmlName(
                                        Identifier(
                                            TriviaList(),
                                            SyntaxKind.ParamKeyword,
                                            "param",
                                            "param",
                                            TriviaList())))),
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextNewLine(
                                        TriviaList(),
                                        Constants.NewLine,
                                        Constants.NewLine,
                                        TriviaList()),
                                    XmlTextLiteral(
                                        TriviaList(
                                            DocumentationCommentExterior("    ///")),
                                        " ",
                                        " ",
                                        TriviaList()))),
                            XmlExampleElement(
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(),
                                            "The description of ",
                                            "The description of ",
                                            TriviaList()))),
                                XmlNullKeywordElement()
                                .WithName(
                                    XmlName(
                                        Identifier("paramref")))
                                .WithAttributes(
                                    SingletonList<XmlAttributeSyntax>(
                                        XmlNameAttribute(
                                            XmlName(
                                                Identifier("name")),
                                            Token(SyntaxKind.DoubleQuoteToken),
                                            IdentifierName(EnumParameter),
                                            Token(SyntaxKind.DoubleQuoteToken)))),
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(),
                                            ".",
                                            ".",
                                            TriviaList()))))
                            .WithStartTag(
                                XmlElementStartTag(
                                    XmlName(
                                        Identifier("returns"))))
                            .WithEndTag(
                                XmlElementEndTag(
                                    XmlName(
                                        Identifier("returns")))),
                            XmlText()
                            .WithTextTokens(
                                TokenList(
                                    XmlTextNewLine(
                                        TriviaList(),
                                        Constants.NewLine,
                                        Constants.NewLine,
                                        TriviaList()))),
                        }));
            }

            static IEnumerable<SyntaxNodeOrToken> GetSwitchExpressionArms(string enumName, IEnumerable<string?> ids)
            {
                foreach (var id in ids.Where(static id => id is not null))
                {
                    yield return GetSwitchExpressionArm(enumName, id!);
                    yield return Token(SyntaxKind.CommaToken);
                }

                yield return SwitchExpressionArm(
                    DiscardPattern(),
                    LiteralExpression(
                        SyntaxKind.StringLiteralExpression,
                        Literal("Unknown")));
                yield return Token(SyntaxKind.CommaToken);

                static SyntaxNodeOrToken GetSwitchExpressionArm(string name, string id)
                {
                    var cleanedId = CleanupIdentifier(id);
                    return SwitchExpressionArm(
                        ConstantPattern(
                            MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                IdentifierName(name),
                                IdentifierName(cleanedId))),
                        LiteralExpression(
                            SyntaxKind.StringLiteralExpression,
                            Literal(id)));
                }
            }
        }

        static IEnumerable<SyntaxNodeOrToken> GetEnumMemberDeclarations(IEnumerable<string?> ids)
        {
            foreach (var id in ids.Where(static id => id is not null))
            {
                yield return GetEnumMemberDeclaration(id!);
                yield return Token(SyntaxKind.CommaToken);
            }

            static EnumMemberDeclarationSyntax GetEnumMemberDeclaration(string id)
            {
                var cleanedId = CleanupIdentifier(id);
                if (string.Equals(cleanedId, id, StringComparison.Ordinal))
                {
                    // do not generate the description
                    return EnumMemberDeclaration(
                        Identifier(
                            TriviaList(Trivia(GetDocumentation(id))),
                            id,
                            TriviaList()));
                }

                return EnumMemberDeclaration(
                    Identifier(cleanedId))
                    .WithAttributeLists(
                    SingletonList(
                        AttributeList(
                            SingletonSeparatedList(
                                Attribute(ParseName(typeof(System.ComponentModel.DescriptionAttribute).FullName!))
                                .WithArgumentList(
                                    AttributeArgumentList(
                                        SingletonSeparatedList(
                                            AttributeArgument(
                                                LiteralExpression(
                                                    SyntaxKind.StringLiteralExpression,
                                                    Literal(id))))))))
                        .WithOpenBracketToken(
                            Token(
                                TriviaList(Trivia(GetDocumentation(id))),
                                SyntaxKind.OpenBracketToken,
                                TriviaList()))));

                static DocumentationCommentTriviaSyntax GetDocumentation(string id)
                {
                    return DocumentationCommentTrivia(
                        SyntaxKind.SingleLineDocumentationCommentTrivia,
                        List(
                            new XmlNodeSyntax[]
                            {
                                XmlText()
                                .WithTextTokens(
                                    TokenList(
                                        XmlTextLiteral(
                                            TriviaList(DocumentationCommentExterior("///")),
                                            " ",
                                            " ",
                                            TriviaList()))),
                                XmlExampleElement(
                                    SingletonList<XmlNodeSyntax>(
                                        XmlText()
                                        .WithTextTokens(
                                            TokenList(
                                                XmlTextNewLine(Constants.NewLine, continueXmlDocumentationComment: false),
                                                XmlTextLiteral(
                                                    TriviaList(
                                                        DocumentationCommentExterior("    ///")),
                                                    $" {id}.",
                                                    $" {id}.",
                                                    TriviaList()),
                                                XmlTextNewLine(Constants.NewLine, continueXmlDocumentationComment: false),
                                                XmlTextLiteral(
                                                    TriviaList(DocumentationCommentExterior("    ///")),
                                                    " ",
                                                    " ",
                                                    TriviaList())))))
                                .WithStartTag(XmlElementStartTag(XmlName(Identifier("summary"))))
                                .WithEndTag(XmlElementEndTag(XmlName(Identifier("summary")))),
                                XmlText()
                                .WithTextTokens(TokenList(XmlTextNewLine(Constants.NewLine, continueXmlDocumentationComment: false))),
                            }));
                }
            }
        }
    }

    /// <summary>
    /// Cleans up the identifier.
    /// </summary>
    /// <param name="id">The identifier.</param>
    /// <returns>The cleaned identifier.</returns>
    public static string CleanupIdentifier(string id)
    {
        var returnChars = new char[id.Length];
        var count = default(int);
        foreach (var chr in id)
        {
            returnChars[count] = chr is ':' or ';' or '/' or '-' or '\\' or '(' or ')'
                ? ' '
                : chr;
            count++;
        }

        id = new string(returnChars, 0, count);
        id = id.Replace("+", " plus ");
        var split = id.Split(SpaceSeparator, StringSplitOptions.RemoveEmptyEntries);

        // make sure they're cased correctly
        for (var i = 0; i < split.Length; i++)
        {
            var value = split[i];
            if (value.All(char.IsUpper))
            {
                if (value.Length > 2)
                {
                    split[i] = string.Concat(value[0], value.Substring(1).ToLowerInvariant());
                }
            }
            else if (char.IsLower(value[0]))
            {
                split[i] = string.Concat(char.ToUpperInvariant(value[0]), value.Substring(1));
            }
        }

        return string.Concat(split);
    }
}